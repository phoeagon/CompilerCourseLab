program prog3MQ847;
#include( "stdlib.hhf" );
static
	numbers:int32[100];
	left:int32;
procedure main;@nodisplay;

begin main;
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(32);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(32);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	imul(ebx, eax);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(32);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	xor (edx,edx);
	idiv(ebx);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(32);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	xor (edx,edx);
	idiv(ebx);
	mov(edx,eax);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(32);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(1);
	pushd(10);
	pushd(3);
	pop(ebx);
	pop(eax);
	imul(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	pushd(10);
	call stdout.putc;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
epilog_main:
pop(eax);
end main;
procedure foobar( Var a:int32);@nodisplay;

begin foobar;
	pushd(3);
jmp epilog_foobar;
	push (a);
	pushd(0);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)>(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(eax);
	test(eax,eax);
	je tagATHV4X;
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	push (a);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	call(foobar);
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	tagATHV4X :
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	push (a);
	call stdout.puti32;
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
epilog_foobar:
pop(eax);
end foobar;
procedure q_sort( Var left:int32;right:int32);@nodisplay;
var 
 l_hold:int32;
 r_hold:int32;
 pivot:int32;

begin q_sort;
	lea( eax,l_hold);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	lea( eax,r_hold);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	lea( eax,pivot);
	push(eax);
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	pushd([eax+ebx*4]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	tagSIW6JZ :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)<=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(eax);
	test(eax,eax);
	je tag7G2WB2;
	tagO9IRFT :
	lea( eax,numbers);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	pushd([eax+ebx*4]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)>=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)<=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	pop(eax);
	test(eax,eax);
	je tag8L93NK;
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	jmp tagO9IRFT;
	tag8L93NK :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	pop(eax);
	test(eax,eax);
	je tagBDKRPC;
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	lea(eax,[eax+ebx*4]);
	push(eax);
	lea( eax,numbers);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	pushd([eax+ebx*4]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	tagBDKRPC :
	tag71AT0C :
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	pushd([eax+ebx*4]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)<=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)<=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	pop(eax);
	test(eax,eax);
	je tagEK9H66;
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	jmp tag71AT0C;
	tagEK9H66 :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	pop(eax);
	test(eax,eax);
	je tagWPPW85;
	lea( eax,numbers);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	lea(eax,[eax+ebx*4]);
	push(eax);
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	pushd([eax+ebx*4]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	pushd([eax]);
	pop(eax);
	tagWPPW85 :
	jmp tagSIW6JZ;
	tag7G2WB2 :
	push (left);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)<=(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(eax);
	test(eax,eax);
	je tag62P256;
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	push (pivot);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	call(q_sort);
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	tag62P256 :
	push (right);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( (type int32 eax)>(type int32 ebx) ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(eax);
	test(eax,eax);
	je tagJHHDQD;
	push(ebx);
	push(ecx);
	push(edx);
	push(esi);
	push(edi);
	push (right);
	call(q_sort);
	pop(edi);
	pop(esi);
	pop(edx);
	pop(ecx);
	pop(ebx);
	push(eax);
	pop(eax);
	tagJHHDQD :
epilog_q_sort:
pop(eax);
end q_sort;
begin prog3MQ847;
	 call(main);
end prog3MQ847;
