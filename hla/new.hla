program prog;
static
	numbers:int32;
	left:int32;
procedure main;@nodisplay;

begin main;
	main();
	push(eax);
	pop(eax);
end main;
procedure q_sort( Var left:int32;right:int32);@nodisplay;
var 
 l_hold:int32;
 pivot:int32;
 r_hold:int32;

begin q_sort;
	lea( eax,l_hold);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,r_hold);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,pivot);
	push(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	je tag6GBX99;
	push (numbers);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx>=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	je tagL1WJB8;
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tagL1WJB8 :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	push(eax);
	push (numbers);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	je tagXZQKPB;
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tagXZQKPB :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	lea( eax,numbers);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	push(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tag6GBX99 :
	push (left);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push(ebp);
	mov(esp,ebp);
	push (pivot);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	call(q_sort);
	mov(ebp,esp);
	pop(ebp);
	push(eax);
	pop(eax);
	push (right);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx>eax ) then
	mov(1,eax);
	else
	xor(eax,eax);
	endif;
	push (eax);
	push(ebp);
	mov(esp,ebp);
	push (right);
	call(q_sort);
	mov(ebp,esp);
	pop(ebp);
	push(eax);
	pop(eax);
end q_sort;
begin prog;
	 call(main);
end prog;
