program t;
static
	numbers:int32[10];
procedure q_sort( Var numbers:int32;left:int32;right:int32);@nodisplay;
var 
 l_hold:int32;
 right:int32;
 r_hold:int32;
 pivot:int32;

begin q_sort;
begin q_sort;
	lea( eax,l_hold);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,r_hold);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,pivot);
	push(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	je tag9A5VRY;
	push (numbers);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx>=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	je tagO0AA3G;
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tagO0AA3G :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	push(eax);
	push (numbers);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	pop(ebx);
	pop(eax);
	and (ebx, eax);
	push (eax);
	je tagDHN5NA;
	lea( eax,left);
	push(eax);
	push (left);
	pushd(1);
	pop(ebx);
	pop(eax);
	add(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tagDHN5NA :
	push (left);
	push (right);
	pop(ebx);
	pop(eax);
	push (eax);
	lea( eax,numbers);
	push(eax);
	push (right);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	push(eax);
	push (numbers);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	pushd([eax]);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,right);
	push(eax);
	push (right);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	tag9A5VRY :
	lea( eax,numbers);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	add(ebx,eax);
	push(eax);
	push (pivot);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,pivot);
	push(eax);
	push (left);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,left);
	push(eax);
	push (l_hold);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	lea( eax,right);
	push(eax);
	push (r_hold);
	pop(ebx);
	pop(eax);
	mov ( ebx, [eax] ); 
	push (eax);
	pop(eax);
	push (left);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx<=eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	push(ebp);
	mov(esp,ebp);
	push (pivot);
	pushd(1);
	pop(ebx);
	pop(eax);
	sub(ebx, eax);
	push (eax);
	call(q_sort);
	mov(ebp,esp);
	pop(ebp);
	push(eax);
	pop(eax);
	push (right);
	push (pivot);
	pop(ebx);
	pop(eax);
	if( ebx>eax ) then
	mov(1,eax);
	else
	xor(eax);
	endif;
	push (eax);
	push(ebp);
	mov(esp,ebp);
	push (right);
	call(q_sort);
	mov(ebp,esp);
	pop(ebp);
	push(eax);
	pop(eax);

end q_sort;

begin t;
end t;
