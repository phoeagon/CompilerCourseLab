%token int_const char_const float_const id string 
%%

external_decl		= function_definition
			| decl
			;
function_definition	= type_spec + declarator + compound_stat
			;
decl			= type_spec + declarator + ';'
			;
type_spec		= 'void' | 'char' | 'int' | 'float' | struct_spec
			;
struct_spec		= 'struct' + id + '{' + struct_decl_list + '}'
			| 'struct' + '{' + struct_decl_list + '}'
			| 'struct' + id
			;
struct_decl_list	= struct_decl 
			| struct_decl_list + struct_decl
			;
struct_decl		= declarator_list + ';'
			;
declarator_list		= declarator
			| declarator_list + ',' + declarator
			;
declarator		= '*' + direct_declarator
			| direct_declarator
			;
direct_declarator	= id
			| '(' + declarator + ')'
			| direct_declarator + '[' + const_exp + ']'
			| direct_declarator + '[' + ']'
			| '$[' + direct_declarator + ',' + param_list + ']'
			| '$[' + direct_declarator + ']'
			;
param_list		= param_decl
			| param_list + ',' + param_decl
			;
param_decl		= type_spec + declarator
			| type_spec + abstract_declarator
			| type_spec
			;
abstract_declarator	= '*'
			| '*' + direct_abstract_declarator
			| direct_abstract_declarator
			;
direct_abstract_declarator= '(' abstract_declarator ')'
			| direct_abstract_declarator '[' const_exp ']'
			|				'[' const_exp ']'
			| direct_abstract_declarator '(' param_list ')'
			| '(' param_list ')'
			| direct_abstract_declarator + '(' + ')'
			| '(' + ')'
			;
stat			= exp_stat
			| compound_stat
			| selection_stat
			| iteration_stat
			| jump_stat
			;
exp_stat		= exp ';'
			| ';'
			;
compound_stat		= '{' + decl_list + stat_list + '}'
			| '{' + stat_list + '}'
			| '{' + decl_list + '}'
			| '{' + '}'
			;
stat_list		= stat
			| stat_list + stat
			;
selection_stat		= 'if' + '(' + exp + ')' + stat
			| 'if' + '(' + exp + ')' + stat + 'else' + stat
			| 'switch' + '(' + exp + ')' + stat
			;
iteration_stat		= 'while' + '(' + exp + ')' + stat
			| 'do' + stat + 'while' + '(' + exp + ')' + ';'
			| 'for' + '(' + exp + ';' + exp + ';' + exp + ')' + stat
			| 'foreach' + '(' id + 'in' + stat + ')' + stat
			;
jump_stat		= 'continue' + ';'
			| 'break' + ';'
			| 'return' + exp + ';'
			| 'return'	+ ';'
			;
exp			= const_exp
			| unary_exp + assignment_operator + assignment_exp
			;
assignment_operator	= '<--'
			;
const_exp		= logical_or_exp
			;
logical_or_exp		= logical_and_exp
			| logical_or_exp '||' logical_and_exp
			;
logical_and_exp		= inclusive_or_exp
			| logical_and_exp '&&' and_exp
			;
and_exp			= equality_exp
			| and_exp '&' equality_exp
			;
equality_exp		= relational_exp
			| equality_exp '=' relational_exp
			| equality_exp '!=' relational_exp
			;
relational_exp		= additive_exp
			| relational_exp '<' additive_exp
			| relational_exp '>' additive_exp
			| relational_exp '<=' additive_exp
			| relational_exp '>=' additive_exp
			;
additive_exp		= mult_exp
			| additive_exp '+' mult_exp
			| additive_exp '-' mult_exp
			;
mult_exp		= cast_exp
			| mult_exp '*' cast_exp
			| mult_exp '/' cast_exp
			| mult_exp '%' cast_exp
			;
cast_exp		= unary_exp
			| '(' type_spec ')' cast_exp
			;
unary_exp		= postfix_exp
			| unary_operator cast_exp
			;
unary_operator		= '&' | '*' | '+' | '-' | '!'
			;
postfix_exp		= primary_exp
			| postfix_exp + '[' + exp + ']'
			| '$[' + postfix_exp + ':'+ argument_exp_list + ']'
			| '$[' + postfix_exp + ']'
			| postfix_exp + '-->' + id 
			;
primary_exp		= id
			| const
			| string
			| '(' + exp + ')'
			;
argument_exp_list	= assignment_exp
			| argument_exp_list + ',' + assignment_exp
			;
const			= int_const
			| char_const
			| float_const
			;

